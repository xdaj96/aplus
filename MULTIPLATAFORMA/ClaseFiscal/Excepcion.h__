#ifndef EXCEPCION_H
#define EXCEPCION_H

#include <string>

class Excepcion
{
public:
	enum Errores
	{
		// Módulo: Transporte
		TRANSPORTE_ERROR_APERTURA,
		TRANSPORTE_ERROR_TIEMPO_DE_ESPERA_AGOTADO,
		TRANSPORTE_ERROR_PARAMETROS_SERIE,
		TRANSPORTE_ERROR_ESCRITURA,
		TRANSPORTE_ERROR_INICIALIZACION_SOCKET,
		TRANSPORTE_ERROR_BIND_SOCKET,
		TRANSPORTE_ERROR_SELECT_SOCKET,
		TRANSPORTE_ERROR_VERSION_SOCKET,
		TRANSPORTE_ERROR_CONEXION,
		TRANSPORTE_ERROR_LECTURA,
		TRANSPORTE_ERROR_FORMATO_IP,
		// Módulo: Protocolo
		PROTOCOLO_ERROR_ATOMICIDAD,
		// Módulo: Impresor Fiscal
		IMPRESOR_FISCAL_ERROR_NO_IMPLEMENTADO,
		IMPRESOR_FISCAL_ERROR_CAMPO_NO_ENCONTRADO
	};

	Excepcion(Errores Err, const std::string &Cont = "")
	{
		struct ErrDesc
		{
			Errores Err;
			const char *Descripcion;
		};
		static ErrDesc ErrDescs[] =
		{
			// Módulo: Transporte
			{
				TRANSPORTE_ERROR_APERTURA,
				"Error de apertura"
			},
			{
				TRANSPORTE_ERROR_PARAMETROS_SERIE,
				"Error de parámetros de puerto serie"
			},
			{ 		
				TRANSPORTE_ERROR_TIEMPO_DE_ESPERA_AGOTADO,
				"Tiempo de espera agotado"
			},
			{
				TRANSPORTE_ERROR_ESCRITURA,
				"Error de escritura"
			},
			{
				TRANSPORTE_ERROR_INICIALIZACION_SOCKET,
				"Error de inicialización de socket"
			},
			{
				TRANSPORTE_ERROR_BIND_SOCKET,
				"Error de bind()"
			},
			{
				TRANSPORTE_ERROR_SELECT_SOCKET,
				"Error en función select()"
			},
			{
				TRANSPORTE_ERROR_VERSION_SOCKET,
				"Error de versión de socket"
			},
			{
				TRANSPORTE_ERROR_CONEXION,
				"Error de conexión"
			},
			{
				TRANSPORTE_ERROR_LECTURA,
				"Error de lectura"
			},
			{
				TRANSPORTE_ERROR_FORMATO_IP,
				"Error de formato en dirección de IP"
			},
			// Módulo: Protocolo
			{
				PROTOCOLO_ERROR_ATOMICIDAD,
				"Error de reentrancia en la ejecución"
			},
			// Módulo: Impresor Fiscal
			{
				IMPRESOR_FISCAL_ERROR_NO_IMPLEMENTADO,
				"Función no soportada en versión de controlador fiscal seleccionada"				
			},
			{
				IMPRESOR_FISCAL_ERROR_CAMPO_NO_ENCONTRADO,
				"Campo de respuesta no encontrado"
			}
		};
		Codigo = Err;
		Contexto = Cont;
		const unsigned nTabla = sizeof ErrDescs / sizeof(ErrDesc);
		for (unsigned i = 0; i < nTabla; i++)
			if (ErrDescs[i].Err == Err)
			{
				Descripcion = ErrDescs[i].Descripcion;
				return;
			}
		Descripcion = "Error desconocido";
	}

	Errores Codigo;
	std::string Descripcion;
	std::string Contexto;

#ifdef WIN32
	static std::string GetLastErrorDesc();
#endif
};

#endif
